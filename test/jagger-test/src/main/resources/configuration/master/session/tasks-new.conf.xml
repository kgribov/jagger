<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2010-2012 Grid Dynamics Consulting Services, Inc, All Rights Reserved
  ~ http://www.griddynamics.com
  ~
  ~ This library is free software; you can redistribute it and/or modify it under the terms of
  ~ the GNU Lesser General Public License as published by the Free Software Foundation; either
  ~ version 2.1 of the License, or any later version.
  ~
  ~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  ~ AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  ~ IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  ~ DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
  ~ FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  ~ DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  ~ SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  ~ CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  ~ OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  ~ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  -->

<beans:beans
        xmlns="http://www.griddynamics.com/schema/jagger"
        xmlns:beans="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation=
                "
        http://www.griddynamics.com/schema/jagger
        http://www.griddynamics.com/schema/jagger.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"
        >

    <beans:import resource="../provider/object-creators.conf.xml" />
    <beans:import resource="../metric/calculatorsAndAggregators.conf.xml" />

    <beans:bean id="endpointsIterable-sleep-5ms" class="java.util.LinkedList">
        <beans:constructor-arg value="#{endpointConfigurator.getEndpoints('/sleep/5')}"/>
    </beans:bean>

    <test-description id="sleep-service-5ms-simple-http-query-provider" name="sleep-service-5ms-simple-http-query-provider" version="1">

        <info-collectors>
            <validator xsi:type="validator-not-null-response"/>

            <validator xsi:type="validator-custom" validator="metric.TrueValidator"/>

            <!--Standard metrics-->
            <metric xsi:type="metric-success-rate" plotData="true"/>

            <metric xsi:type="metric-not-null-response" plotData="true"/>

        </info-collectors>

        <scenario  xsi:type="scenario-query-pool">

            <query-distributor xsi:type="query-distributor-round-robin" />

            <invoker xsi:type="invoker-apache-http"/>

            <endpoint-provider xsi:type="endpoint-provider-ref" ref="endpointsIterable-sleep-5ms"/>

            <query-provider xsi:type="query-provider-file" path="configuration/master/provider/resources/queries.txt">
                <object-creator xsi:type="object-creator-ref" ref="simple-http-query-creator"/>
            </query-provider>

        </scenario>

    </test-description>

    <test-description id="sleep-service-5ms" name="sleep-service-5ms" version="1">

        <info-collectors>
            <validator xsi:type="validator-not-null-response"/>

            <validator xsi:type="validator-custom" validator="metric.TrueValidator"/>

            <!--Math functions with standard aggregators-->
            <metric id="constant1" xsi:type="metric-custom" calculator="constant" plotData="true" saveSummary="true">
                <metric-aggregator xsi:type="metric-aggregator-avg"/>
                <metric-aggregator xsi:type="metric-aggregator-std"/>
                <metric-aggregator xsi:type="metric-aggregator-sum"/>
            </metric>

            <metric id="increase1" xsi:type="metric-custom" calculator="alwaysIncrease" plotData="true" saveSummary="true">
                <metric-aggregator xsi:type="metric-aggregator-avg"/>
                <metric-aggregator xsi:type="metric-aggregator-std"/>
                <metric-aggregator xsi:type="metric-aggregator-sum"/>
            </metric>

            <metric id="sin1" xsi:type="metric-custom" calculator="sin" plotData="true" saveSummary="true">
                <metric-aggregator xsi:type="metric-aggregator-avg"/>
                <metric-aggregator xsi:type="metric-aggregator-std"/>
                <metric-aggregator xsi:type="metric-aggregator-sum"/>
            </metric>

        </info-collectors>

        <scenario  xsi:type="scenario-query-pool">

            <query-distributor xsi:type="query-distributor-round-robin" />

            <invoker xsi:type="invoker-http"/>

            <endpoint-provider xsi:type="endpoint-provider-ref" ref="endpointsIterable-sleep-5ms"/>

            <query-provider xsi:type="query-provider-list">
                <query-http>emptyTestQuery</query-http>

            </query-provider>

        </scenario>

    </test-description>


    <beans:bean id="endpointsIterable-sleep-50ms" class="java.util.LinkedList">
        <beans:constructor-arg value="#{endpointConfigurator.getEndpoints('/sleep/50')}"/>
    </beans:bean>

    <test-description id="sleep-service-50ms" name="sleep-service-50ms" version="1">

        <info-collectors>
            <validator xsi:type="validator-not-null-response"/>

            <validator xsi:type="validator-custom" validator="metric.TrueValidator"/>

            <!--Math functions with custom aggregators-->
            <metric id="constant2" xsi:type="metric-custom" calculator="constant" plotData="true" saveSummary="true">
                <metric-aggregator xsi:type="metric-aggregator-ref" ref="maxAggregator"/>
                <metric-aggregator xsi:type="metric-aggregator-ref" ref="minAggregator"/>
            </metric>

            <metric id="increase2" xsi:type="metric-custom" calculator="alwaysIncrease" plotData="true" saveSummary="true">
                <metric-aggregator xsi:type="metric-aggregator-ref" ref="maxAggregator"/>
                <metric-aggregator xsi:type="metric-aggregator-ref" ref="minAggregator"/>
            </metric>

            <metric id="sin2" xsi:type="metric-custom" calculator="sin" plotData="true" saveSummary="true">
                <metric-aggregator xsi:type="metric-aggregator-ref" ref="maxAggregator"/>
                <metric-aggregator xsi:type="metric-aggregator-ref" ref="minAggregator"/>
            </metric>

        </info-collectors>

        <scenario  xsi:type="scenario-query-pool">
            <query-distributor xsi:type="query-distributor-round-robin"/>
            <invoker xsi:type="invoker-http"/>

            <endpoint-provider xsi:type="endpoint-provider-ref" ref="endpointsIterable-sleep-50ms"/>

            <query-provider xsi:type="query-provider-list">
                <query-http>emptyTestQuery</query-http>
            </query-provider>

        </scenario>

    </test-description>


    <beans:bean id="endpointsIterable-sleep-50-150ms" class="java.util.LinkedList">
        <beans:constructor-arg value="#{endpointConfigurator.getEndpoints('/sleep/50-150')}"/>
    </beans:bean>

    <test-description id="sleep-service-50-150ms" name="sleep-service-50-150ms" version="1">

        <info-collectors>
            <validator xsi:type="validator-not-null-response"/>

            <validator xsi:type="validator-custom" validator="metric.TrueValidator"/>

            <!--Success rate metrics-->
            <!-- begin: following section is used for docu generation - metric-success-rate -->

            <!--    Example #1: Success rate metric with default aggregators
                    plotData = true => metric vs time data will be saved (displayed in WebUI and PDF report)
                    saveSummary = true => summary value for summary page will be not saved -->
            <metric xsi:type="metric-success-rate" plotData="true" saveSummary="false"/>



            <!--    Example #2: Success rate metric with custom name and default aggregators -->
            <metric id="CustomNameSuccessRate" xsi:type="metric-success-rate" plotData="true" saveSummary="false"/>



            <!--    Example #3: Success rate metric with custom name and custom aggregators
                    With this setup success rate will be aggregated on interval like on picture below -->
            <metric id="CustomSuccessRatePlot" xsi:type="metric-success-rate" plotData="true" saveSummary="false">
                <metric-aggregator xsi:type="metric-aggregator-avg"/>
            </metric>

            <!-- end: following section is used for docu generation - metric-success-rate -->

            <metric id="CustomSuccessRateSummary" xsi:type="metric-success-rate" saveSummary="true">
                <metric-aggregator xsi:type="metric-aggregator-avg"/>
            </metric>




        </info-collectors>

        <scenario  xsi:type="scenario-query-pool">
            <query-distributor xsi:type="query-distributor-round-robin"/>
            <invoker xsi:type="invoker-http"/>

            <endpoint-provider xsi:type="endpoint-provider-ref" ref="endpointsIterable-sleep-50-150ms"/>

            <query-provider xsi:type="query-provider-list">
                <query-http>emptyTestQuery</query-http>
            </query-provider>

        </scenario>

    </test-description>


    <beans:bean id="endpointsIterable-pulse-service-30000-500" class="java.util.LinkedList">
        <beans:constructor-arg value="#{endpointConfigurator.getEndpoints('/sleep/pulse/30000/500')}"/>
    </beans:bean>

    <test-description id="pulse-service-30000-500-abstract" name="pulse-service-30000-500" version="1" >

        <info-collectors>
            <validator xsi:type="validator-not-null-response"/>

            <validator xsi:type="validator-custom" validator="metric.TrueValidator"/>

            <!--Response metrics-->
            <metric id="BodySize" xsi:type="metric-custom" calculator="responseSize" plotData="true">
                <metric-aggregator xsi:type="metric-aggregator-avg"/>
                <metric-aggregator xsi:type="metric-aggregator-sum"/>
            </metric>

            <metric id="ReturnCode" xsi:type="metric-custom" calculator="returnCode" plotData="true">
                <metric-aggregator xsi:type="metric-aggregator-avg"/>
                <metric-aggregator xsi:type="metric-aggregator-sum"/>
            </metric>
        </info-collectors>

         <scenario  xsi:type="scenario-query-pool">
             <query-distributor xsi:type="query-distributor-round-robin"/>
             <invoker xsi:type="invoker-http"/>

             <endpoint-provider xsi:type="endpoint-provider-ref" ref="endpointsIterable-pulse-service-30000-500"/>

             <query-provider xsi:type="query-provider-list">
                 <query-http>emptyTestQuery</query-http>
             </query-provider>

         </scenario>

    </test-description>


    <beans:bean id="endpointsIterable-load-cpu-service-10000000" class="java.util.LinkedList">
        <beans:constructor-arg value="#{endpointConfigurator.getEndpoints('/load/10000000')}"/>
    </beans:bean>

    <test-description id="load-cpu-service-10000000" name="load-cpu-service-10000000" version="1" >

        <scenario  xsi:type="scenario-query-pool">
            <query-distributor xsi:type="query-distributor-round-robin"/>
            <invoker xsi:type="invoker-http"/>

            <endpoint-provider xsi:type="endpoint-provider-ref" ref="endpointsIterable-load-cpu-service-10000000"/>

            <query-provider xsi:type="query-provider-list">
                <query-http>emptyTestQuery</query-http>
            </query-provider>

        </scenario>

    </test-description>


    <beans:bean id="endpointsIterable-allocate-memory-service-1000000x200" class="java.util.LinkedList">
        <beans:constructor-arg value="#{endpointConfigurator.getEndpoints('/allocate/1000000x200')}"/>
    </beans:bean>

    <test-description id="allocate-memory-service-1000000x200" name="allocate-memory-service-1000000x200" version="1" >

        <scenario  xsi:type="scenario-query-pool">
            <query-distributor xsi:type="query-distributor-round-robin"/>
            <invoker xsi:type="invoker-http"/>

            <endpoint-provider xsi:type="endpoint-provider-ref" ref="endpointsIterable-allocate-memory-service-1000000x200"/>

            <query-provider xsi:type="query-provider-list">
                <query-http>emptyTestQuery</query-http>
            </query-provider>

        </scenario>

    </test-description>


    <beans:bean id="endpointsIterable-tcp-service-10000" class="java.util.LinkedList">
        <beans:constructor-arg value="#{endpointConfigurator.getEndpoints('/net/text/10000')}"/>
    </beans:bean>

    <test-description id="tcp-service-10000" name="tcp-service-10000" version="1" >

        <scenario  xsi:type="scenario-query-pool">
            <query-distributor xsi:type="query-distributor-round-robin"/>
            <invoker xsi:type="invoker-http"/>

            <endpoint-provider xsi:type="endpoint-provider-ref" ref="endpointsIterable-tcp-service-10000"/>

            <query-provider xsi:type="query-provider-list">
                <query-http>emptyTestQuery</query-http>
            </query-provider>

        </scenario>

    </test-description>

</beans:beans>